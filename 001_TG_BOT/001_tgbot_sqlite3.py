import telebot
from telebot import types
import sqlite3

token = ''
bot = telebot.TeleBot(token)
name = None

markup = types.InlineKeyboardMarkup()
btn1 = types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='user_list')
btn2 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–≤–æ–∞—Ç–µ–ª—è', callback_data='add_new_user')
btn3 = types.InlineKeyboardButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='edit')
btn4 = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='delete')
markup.row(btn1, btn2)
markup.row(btn3, btn4)

@bot.message_handler(commands=['start']) #  –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
def start(message):
    conn = sqlite3.connect('users.sql')
    cur = conn.cursor()
    
    cur.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name VARCHAR(50) NOT NULL,
                    pass VARCHAR(50)
                  )''')
    conn.commit()
    cur.close()
    conn.close()
    
    bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üòç {message.from_user.first_name} {message.from_user.last_name},\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    bot.register_next_step_handler(message, user_name)   
    
def user_name(message):
    global name
    global count
    count = 1
    name = message.text.strip() #.strip - —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –¥–æ –∏ –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞
    
    bot.send_message(message.chat.id, f'''–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –µ–≥–æ –ø–∞—Ä–æ–ª—å''')
    bot.register_next_step_handler(message, user_pass)

def user_pass(message):
    password = message.text.strip() 
    
    conn = sqlite3.connect('users.sql')
    cur = conn.cursor()
    
    cur.execute('''INSERT INTO users (name, pass) VALUES ("%s", "%s")'''%(name, password))
    conn.commit()
    cur.close()
    conn.close()
    
    
    bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_message(callback):
    if callback.data == 'add_new_user':
        add_new_user(callback.message)
    elif callback.data == 'edit':
        edit_user(callback.message)
    elif callback.data == 'delete':
        delete_user(callback.message)
    elif callback.data == 'user_list':
        show_user_list(callback.message)

def add_new_user(message):
    bot.send_message(message.chat.id, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    bot.register_next_step_handler(message, add_user_name)

def add_user_name(message):
    global name
    name = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    bot.register_next_step_handler(message, add_user_pass)

def add_user_pass(message):
    password = message.text.strip()

    conn = sqlite3.connect('users.sql')
    cur = conn.cursor()

    cur.execute('''INSERT INTO users (name, pass) VALUES (?, ?)''', (name, password))
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!', reply_markup=markup)

def edit_user(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
    bot.register_next_step_handler(message, edit_user_info)

def edit_user_info(message):
    user_id = message.text.strip()
    conn = sqlite3.connect('users.sql')
    cur = conn.cursor()

     # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü—ã
    cur.execute('''SELECT name FROM sqlite_master WHERE type='table' AND name='users';''')
    table_exists = cur.fetchone()

    
    if not table_exists:
        bot.send_message(message.chat.id, '–¢–∞–±–ª–∏—Ü–∞ "users" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', reply_markup=markup)
        cur.close()
        conn.close()
        return
    
    cur.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user_info = cur.fetchone()
    
    if not user_info:
        bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç', reply_markup=markup)
        cur.close()
        conn.close()
        return

    if user_info:
        bot.send_message(message.chat.id, f'–¢–µ–∫—É—â–µ–µ –∏–º—è: {user_info[1]}, —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å: {user_info[2]}')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:')
        bot.register_next_step_handler(message, lambda msg: edit_user_name(msg, user_id))
    else:
        bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.', reply_markup=markup)

def edit_user_name(message, user_id):
    new_name = message.text.strip()
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:')
    bot.register_next_step_handler(message, lambda msg: edit_user_pass(msg, user_id, new_name))

def edit_user_pass(message, user_id, new_name):
    new_pass = message.text.strip()

    conn = sqlite3.connect('users.sql')
    cur = conn.cursor()

    cur.execute('UPDATE users SET name = ?, pass = ? WHERE id = ?', (new_name, new_pass, user_id))
    conn.commit()
    cur.close()
    conn.close()

    bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω!', reply_markup=markup)

def delete_user(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:')
    bot.register_next_step_handler(message, delete_user_info)

def delete_user_info(message):
    user_id = message.text.strip()
    conn = sqlite3.connect('users.sql')
    cur = conn.cursor()

    
    # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü—ã
    cur.execute('''SELECT name FROM sqlite_master WHERE type='table' AND name='users';''')
    table_exists = cur.fetchone()
    
    if not table_exists:
        bot.send_message(message.chat.id, '–¢–∞–±–ª–∏—Ü–∞ "users" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', reply_markup=markup)
        cur.close()
        conn.close()
        return

    cur.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user_info = cur.fetchone()
    
    if not user_info:
        bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç', reply_markup=markup)
        cur.close()
        conn.close()
        return
    
    if user_info:
        bot.send_message(message.chat.id, f'–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º: {user_info[1]} –∏ –ø–∞—Ä–æ–ª–µ–º: {user_info[2]}?')
        bot.send_message(message.chat.id, '–î–∞ –∏–ª–∏ –ù–µ—Ç:')
        bot.register_next_step_handler(message, lambda msg: confirm_delete_user(msg, user_info))
    else:
        bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.', reply_markup=markup)
    cur.close()
    conn.close()

def confirm_delete_user(message, user_info):
    confirm = message.text.strip().lower()
    if confirm == '–¥–∞':
        conn = sqlite3.connect('users.sql')
        cur = conn.cursor()

        cur.execute('DELETE FROM users WHERE id = ?', (user_info[0],))
        conn.commit()
        cur.close()
        conn.close()

        bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup)


def show_user_list(message):
    conn = sqlite3.connect('users.sql')
    cur = conn.cursor()
    
    # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü—ã
    cur.execute('''SELECT name FROM sqlite_master WHERE type='table' AND name='users';''')
    table_exists = cur.fetchone()
    
    if not table_exists:
        bot.send_message(message.chat.id, '–¢–∞–±–ª–∏—Ü–∞ "users" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', reply_markup=markup)
        cur.close()
        conn.close()
        return
    
    cur.execute('SELECT * FROM users')
    all_users = cur.fetchall()
    
    if not all_users:
        bot.send_message(message.chat.id, '–¢–∞–±–ª–∏—Ü–∞ "users" –ø—É—Å—Ç–∞.', reply_markup=markup)
        cur.close()
        conn.close()
        return
    
    
    info = ''
    for el in all_users:
        info += f'ID: {el[0]}, –ò–º—è: {el[1]}, –ü–∞—Ä–æ–ª—å: {el[2]}\n'

    cur.close()
    conn.close()

    bot.send_message(message.chat.id, info, reply_markup=markup)
    
@bot.message_handler(func=lambda message: True)
def handle_unknown_commands(message):
    bot.send_message(message.chat.id, '''–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. 
                     \n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.''', reply_markup=markup)
          
bot.polling(non_stop=True) # –î–µ–ª–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞–±–æ—Ç–∞—é—â–µ–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ